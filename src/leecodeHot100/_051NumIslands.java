package leecodeHot100;

/**
 * 200. 岛屿数量
 * 给你一个由 '1'（陆地）和 '0'（水）组成的的二维网格，请你计算网格中岛屿的数量。
 * 岛屿总是被水包围，并且每座岛屿只能由水平方向和/或竖直方向上相邻的陆地连接形成。
 * 此外，你可以假设该网格的四条边均被水包围。
 * 示例 1：
 * 输入：grid = [
 * ["1","1","1","1","0"],
 * ["1","1","0","1","0"],
 * ["1","1","0","0","0"],
 * ["0","0","0","0","0"]
 * ]
 * 输出：1
 * 示例 2：
 * 输入：grid = [
 * ["1","1","0","0","0"],
 * ["1","1","0","0","0"],
 * ["0","0","1","0","0"],
 * ["0","0","0","1","1"]
 * ]
 * 输出：3
 * 提示：
 * m == grid.length
 * n == grid[i].length
 * 1 <= m, n <= 300
 * grid[i][j] 的值为 '0' 或 '1'
 */
public class _051NumIslands {

    /**
     * 这道题是要计算二维网格中岛屿的数量。
     * 为了解决这个问题，我们可以使用深度优先搜索（DFS）的方法。
     * 具体步骤如下：
     * 1. 遍历二维网格，当遇到值为 '1' 的陆地时，进行深度优先搜索。
     * 2. 在深度优先搜索中，将当前位置的值改为 '0'，表示已经访问过。
     * 3. 在当前位置的上、下、左、右四个方向上进行递归的深度优先搜索，继续寻找相邻的陆地。
     * 4. 递归的终止条件是超出网格边界或当前位置的值为 '0'。
     * 5. 每次进行深度优先搜索时，岛屿的数量加一。
     * 6. 最终返回岛屿的数量。
     * 以下是使用Java语言实现的代码：
     */
    public int numIslands(char[][] grid) {
        int m = grid.length;
        int n = grid[0].length;
        int count = 0;

        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (grid[i][j] == '1') {
                    count++;
                    dfs(grid, i, j);
                }
            }
        }

        return count;
    }

    private void dfs(char[][] grid, int i, int j) {
        int m = grid.length;
        int n = grid[0].length;

        if (i < 0 || i >= m || j < 0 || j >= n || grid[i][j] == '0') {
            return;
        }
        grid[i][j] = '0';
        dfs(grid, i - 1, j);
        dfs(grid, i + 1, j);
        dfs(grid, i, j - 1);
        dfs(grid, i, j + 1);
    }
}
